from aiogram import types
from aiogram.dispatcher.filters.builtin import CommandStart
from filters.chek_admin import IsAdmin
from utils.db_api.database import Product
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.dispatcher.storage import FSMContext

product_db = Product()

from loader import bot

from loader import dp

class Delete_product(StatesGroup):
    Q1 = State()
    Q2 = State()

@dp.message_handler(IsAdmin(), commands='delete_product')
async def admin(message: types.Message,  state: FSMContext):
    await message.answer(
        '–î–ª—è —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ ID üëá(—á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å ID, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–º–∞–Ω–¥–æ–π /show_products)\n\n'
        '!!! –ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –æ–Ω —É–¥–∞–ª—è–µ—Ç—Å—è –Ω–∞–≤–µ–≥–¥–∞ !!! '
    )
    await Delete_product.Q1.set()
    
@dp.message_handler(IsAdmin(), state=Delete_product.Q1)
async def admin(message: types.Message, state: FSMContext):
    answer = message.text
    product = product_db.get_product(int(answer))

    async with state.proxy() as data:
        data['Q1'] = answer
    
    print(product)
    try:
        await message.answer(f'–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–∏ —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä {product[0][5]} ? \n(–î–∞/–ù–µ—Ç)')
    except IndexError:
        await message.answer('–¢–æ–≤–∞—Ä–∞ —Å —Ç–∞–∫–∏–º ID –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å ID —Ç–æ–≤–∞—Ä–∞ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–º–∞–Ω–¥–π  /show_products')
        await state.finish() 
    await Delete_product.Q2.set()


    
@dp.message_handler(IsAdmin(), state=Delete_product.Q2)
async def admin(message: types.Message, state: FSMContext):
    text = message.text
    if text.lower() == '–Ω–µ—Ç':
        await message.answer('–û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞')
    elif text.lower() == '–¥–∞':
        data = await state.get_data()
        choice = product_db.delete_product(data.get('Q1'))
        product = product_db.get_product(data.get('Q1'))
        print('12345')
        print(product)

        if choice == True:
            # product = product_db.get_product(int(choice))
            await message.answer(f'–¢–æ–≤–∞—Ä {product[0][5]} –±—ã–ª —É–¥–∞–ª–µ–Ω')
        else:
            await message.answer("–¢–æ–≤–∞—Ä–∞ —Å —Ç–∞–∫–∏–º ID –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å ID —Ç–æ–≤–∞—Ä–∞ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–º–∞–Ω–¥–π  /show_products")

    await state.finish() 